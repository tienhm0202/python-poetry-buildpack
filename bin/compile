#!/usr/bin/env bash

export BUILD_DIR=$1
export ENV_DIR=$3
export POETRY_VERSION="$(cat $ENV_DIR/POETRY_VERSION 2>/dev/null)"

export DISABLE_POETRY_CREATE_RUNTIME_FILE="$(cat $ENV_DIR/DISABLE_POETRY_CREATE_RUNTIME_FILE 2>/dev/null || true)"

if [ -z "$POETRY_VERSION" ];
then
    export POETRY_VERSION=1.1.3
    echo "-----> No Poetry version specified in POETRY_VERSION config var. Defaulting to $POETRY_VERSION."
else
    echo "-----> Using Poetry version from POETRY_VERSION config var: $POETRY_VERSION"
fi

function indent() {
        c='s/^/       /'
        case $(uname) in
                Darwin) sed -l "$c";;
                *)      sed -u "$c";;
        esac
}

if [[ $BUILD_DIR != '/app' ]]; then
    # python expects to reside in /app, so set up symlinks
    # we will not remove these later so subsequent buildpacks can still invoke it
    ln -nsf "$BUILD_DIR/.heroku/python" /app/.heroku/python
    ln -nsf "$BUILD_DIR/.heroku/vendor" /app/.heroku/vendor
    # Note: .heroku/src is copied in later.
fi

echo "-----> Generate requirements.txt with Poetry"

echo "-----> Install Poetry"

curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py \
  | sed -e 's/allowed_executables = \["python", "python3"\]/allowed_executables = ["python3"]/' \
  | python3 \
  | indent

source $HOME/.poetry/env

echo "-----> Set up Python version for Poetry"

poetry env use /tmp/buildpacks/custom/builds/runtimes/python${PYTHON_VERSION}

echo "-----> Export requirements.txt from Poetry"

cd "$BUILD_DIR"

# pip can't handle editable dependencies when requiring hashes (https://github.com/pypa/pip/issues/4995)
poetry export -f requirements.txt -o requirements.txt --without-hashes

RUNTIME_FILE="runtime.txt"

echo "-----> Export Python version from Poetry to Heroku $RUNTIME_FILE file"

if [ "$DISABLE_POETRY_CREATE_RUNTIME_FILE" ] && [ "$DISABLE_POETRY_CREATE_RUNTIME_FILE" != "0" ]; then
  echo "-----> Skip generation of $RUNTIME_FILE file from poetry.lock"
  exit 0
fi

if [ -f "$RUNTIME_FILE" ]; then
  echo "-----> $RUNTIME_FILE found, delete this file from your repository!"
  exit 1
fi

# Get Python version from env
VERSION=${PYTHON_VERSION}

# Version is only valid if exact interpreter version is specified
#
# ^3.8 -> not valid
# 3.8 -> not valid
# 3.8.1 -> valid

if [[ $VERSION =~ ^[2-9](\.[0-9]+){2}$ ]]; then
  echo "-----> Write $VERSION into $RUNTIME_FILE"
  echo "python-$VERSION" > $RUNTIME_FILE
else
  echo "-----> $VERSION is not valid, please specify an exact Python version (e.g. 3.8.1) in your pyproject.toml (and thus poetry.lock)"
  exit 1
fi
